{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.0",
    "title": "PowerPulse REST API",
    "description": "Show all API end poinst for project",
    "license": {
      "name": "PowerPulse REST API",
      "url": "https://powerpulse-backend.onrender.com"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://powerpulse-backend.onrender.com" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Products",
      "description": "Products endpoints"
    },
    {
      "name": "Exercises",
      "description": "Exercises endpoints"
    },
    {
      "name": "Filters",
      "description": "Filters endpoints"
    },
    {
      "name": "Diary",
      "description": "Diary endpoints"
    },
    {
      "name": "Statistic",
      "description": "Statistic endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "security": [],
        "requestBody": {
          "description": "Registration's object: Json includes name, email and password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Login",
        "parameters": [],
        "security": [],
        "requestBody": {
          "description": "Login's object: json includes email and password of existing user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Logout",
        "parameters": [],
        "security": [],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized or Token Is Invalid",
            "content": {}
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh user token",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "body",
            "description": "Refresh token",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "refreshToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get information abuot current authorize user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentUserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/users/update": {
      "put": {
        "tags": ["User"],
        "summary": "Update full info about user, such as weight, height and more",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": ["User"],
        "summary": "Update full info about user, such as weight, height and more",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/users/avatar/upload": {
      "post": {
        "tags": ["User"],
        "summary": "Upload user avatar",
        "description": "Upload a user's avatar image to Google Cloud Storage.",
        "parameters": [
          {
            "name": "avatar",
            "in": "formData",
            "description": "The avatar image file to upload",
            "required": true,
            "type": "file"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "code": 201,
                  "imageUrl": "https://storage.googleapis.com/pover_pulse_bucket/avatars/promising.jpg"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/products?page={page}&pageSize={pageSize}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get list of all products",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of products per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/products?search={search}&category={category}&blood={blood}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get list of all products",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search query to find product",
            "required": false,
            "schema": {
              "type": "string",
              "default": "cheese"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category of searched product",
            "required": false,
            "schema": {
              "type": "string",
              "example": "dairy"
            }
          },
          {
            "name": "blood",
            "in": "query",
            "description": "Blood of searched product",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 3
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/products/current/{productId}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get current product by id",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Body part for filtering exercises",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/products/categories": {
      "get": {
        "tags": ["Products"],
        "summary": "Get list of product`s categories",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductCategoriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/products/allowed": {
      "get": {
        "tags": ["Products"],
        "summary": "Get list of allowed products by blood group",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/products/forbiden": {
      "get": {
        "tags": ["Products"],
        "summary": "Get list of forbiden products by blood group",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/exercises?page={page}&pageSize={pageSize}": {
      "get": {
        "tags": ["Exercises"],
        "summary": "Get list of all exercises",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of products per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExercisesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/exercises/current/{exerciseId}": {
      "get": {
        "tags": ["Exercises"],
        "summary": "Get current exercises by id",
        "parameters": [
          {
            "name": "exerciseId",
            "in": "path",
            "description": "Body part for filtering exercises",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exercise"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/exercises/bodyParts/{bodyPart}": {
      "get": {
        "tags": ["Exercises"],
        "summary": "Get list of exercises filtred by body patr",
        "parameters": [
          {
            "name": "bodyPart",
            "in": "path",
            "description": "Body part for filtering exercises",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exercise"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/exercises/muscules/{target}": {
      "get": {
        "tags": ["Exercises"],
        "summary": "Get list of exercise filtred by target muscule",
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "Target muscule for filtering exercises",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exercise"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/exercises/equipments/{equipment}": {
      "get": {
        "tags": ["Exercises"],
        "summary": "Get list of  exercises filtred by equipment",
        "parameters": [
          {
            "name": "equipment",
            "in": "path",
            "description": "Equipment for filtering exercises",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exercise"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/exercises/filters": {
      "get": {
        "tags": ["Filters"],
        "summary": "Get list of all filters",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/exercises/bodyParts": {
      "get": {
        "tags": ["Filters"],
        "summary": "Get list of body part filters",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/exercises/muscules": {
      "get": {
        "tags": ["Filters"],
        "summary": "Get list of muscules filters",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/exercises/equipments": {
      "get": {
        "tags": ["Filters"],
        "summary": "Get list of equipments filters",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/diary?date={date}": {
      "get": {
        "tags": ["Diary"],
        "summary": "Get list of food and exercise by current date",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date for filtering food and exercise",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "example": "10/11/2023"
                }
              }
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiaryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/diary/food?date={date}": {
      "get": {
        "tags": ["Diary"],
        "summary": "Get list of food by current date",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date for filtering food and exercise",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "example": "10/11/2023"
                }
              }
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoodByDate"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/diary/food": {
      "post": {
        "tags": ["Diary"],
        "summary": "Add a food by current date",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Only need to be authorized",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FoodByDateReq"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoodLog"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/diary/food/{foodId}": {
      "delete": {
        "tags": ["Diary"],
        "summary": "Remove current Food",
        "parameters": [
          {
            "name": "foodId",
            "in": "path",
            "description": "foodId for remove food",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoodLog"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/diary/exercise?date={date}": {
      "get": {
        "tags": ["Diary"],
        "summary": "Get list of exercises by current date",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date for filtering food and exercise",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "example": "10/11/2023"
                }
              }
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseByDate"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/diary/exercise": {
      "post": {
        "tags": ["Diary"],
        "summary": "Add a exercise by current date",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Only need to be authorized",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExerciseByDateReq"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseLog"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/diary/exercise/{exerciseId}": {
      "delete": {
        "tags": ["Diary"],
        "summary": "Remove current exercise",
        "parameters": [
          {
            "name": "exerciseId",
            "in": "path",
            "description": "exerciseId for remove food",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseLog"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/statistic/video": {
      "get": {
        "tags": ["Statistic"],
        "summary": "Get the number of exercise videos",
        "security": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "code": { "type": "integer", "example": 200 },
                    "videos": { "type": "integer", "example": 10 }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/statistic/calories": {
      "get": {
        "tags": ["Statistic"],
        "summary": "Get the total calories burned",
        "security": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "code": { "type": "integer", "example": 200 },
                    "calories": { "type": "number", "example": 5000 }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/statistic/users": {
      "get": {
        "tags": ["Statistic"],
        "summary": "Get the number of users",
        "security": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "code": { "type": "integer", "example": 200 },
                    "users": { "type": "integer", "example": 50 }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/statistic/time": {
      "get": {
        "tags": ["Statistic"],
        "summary": "Get the total exercise time",
        "security": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "code": { "type": "integer", "example": 200 },
                    "hours": { "type": "number", "example": 120 }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    },
    "/statistic/training": {
      "get": {
        "tags": ["Statistic"],
        "summary": "Get the number of training sessions",
        "security": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "code": { "type": "integer", "example": 200 },
                    "hours": { "type": "integer", "example": 20 }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found!",
            "content": {}
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "User12"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token for authentication",
            "example": "your_jwt_token"
          },
          "userId": {
            "type": "string",
            "description": "User's id",
            "example": "32143232436545474"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "User12"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@example.com"
              }
            }
          }
        },
        "example": {
          "token": "your_jwt_token",
          "userId": "32143232436545474",
          "user": {
            "name": "User12",
            "email": "user@example.com"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message indicating the success of the logout operation",
            "example": "Successful Log Out"
          }
        }
      },
      "GetCurrentUserRequest": {
        "type": "object",
        "properties": {},
        "example": {}
      },
      "GetCurrentUserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "user": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User's ID",
                "example": "654cd9eb473e0780072ec53f"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Jhon Wick"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "jhon@wick.com"
              },
              "dailyExerciseTime": {
                "type": "integer",
                "description": "User's daily exercise time",
                "example": 110
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "user": {
            "_id": "654cd9eb473e0780072ec53f",
            "name": "Jhon Wick",
            "email": "jhon@wick.com",
            "dailyExerciseTime": 110
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "required": [
          "height",
          "currentWeight",
          "desiredWeight",
          "birthday",
          "blood",
          "sex",
          "levelActivity"
        ],
        "properties": {
          "height": {
            "type": "number",
            "description": "User's height",
            "minimum": 150
          },
          "currentWeight": {
            "type": "number",
            "description": "User's current weight",
            "minimum": 35
          },
          "desiredWeight": {
            "type": "number",
            "description": "User's desired weight",
            "minimum": 35
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "User's birthday (YYYY-MM-DD)"
          },
          "blood": {
            "type": "number",
            "description": "User's blood type",
            "enum": [1, 2, 3, 4]
          },
          "sex": {
            "type": "string",
            "description": "User's gender",
            "enum": ["male", "female"]
          },
          "levelActivity": {
            "type": "number",
            "description": "User's activity level",
            "enum": [1, 2, 3, 4, 5]
          }
        },
        "example": {
          "height": 170,
          "currentWeight": 70,
          "desiredWeight": 65,
          "birthday": "1990-01-01",
          "blood": 1,
          "sex": "male",
          "levelActivity": 3
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's ID",
            "example": "654cd9eb473e0780072ec53f"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Jhon Wick"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "jhon@wick.com"
          },
          "height": {
            "type": "integer",
            "description": "User's height",
            "example": 170
          },
          "currentWeight": {
            "type": "integer",
            "description": "User's current weight",
            "example": 70
          },
          "desiredWeight": {
            "type": "integer",
            "description": "User's desired weight",
            "example": 65
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "User's birthday",
            "example": "1990-01-01"
          },
          "blood": {
            "type": "integer",
            "description": "User's blood type",
            "example": 1
          },
          "sex": {
            "type": "string",
            "description": "User's gender",
            "example": "male"
          },
          "levelActivity": {
            "type": "integer",
            "description": "User's activity level",
            "example": 3
          },
          "dailyCalories": {
            "type": "integer",
            "description": "User's daily calorie intake",
            "example": 2500
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "user": {
            "_id": "654cd9eb473e0780072ec53f",
            "name": "Jhon Wick",
            "email": "jhon@wick.com",
            "height": 170,
            "currentWeight": 70,
            "desiredWeight": 65,
            "birthday": "1990-01-01",
            "blood": 1,
            "sex": "male",
            "levelActivity": 3,
            "dailyCalories": 2500
          }
        }
      },
      "GetAllowedRequest": {
        "type": "object",
        "properties": {
          "blood": {
            "type": "integer",
            "description": "Blood group of the user",
            "enum": [1, 2, 3, 4]
          }
        },
        "required": ["blood"],
        "example": {
          "blood": 1
        }
      },
      "GetProductsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": [
            {
              "_id": "5d51694902b2373622ff5773",
              "weight": 100,
              "calories": 340,
              "category": "dairy",
              "title": "Danbo cheese",
              "groupBloodNotAllowed": {
                "1": true,
                "2": true,
                "3": false,
                "4": false
              }
            }
          ]
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Product's ID",
            "example": "5d51694902b2373622ff5773"
          },
          "weight": {
            "type": "integer",
            "description": "Product's weight",
            "example": 100
          },
          "calories": {
            "type": "integer",
            "description": "Product's calories",
            "example": 340
          },
          "category": {
            "type": "string",
            "description": "Product's category",
            "example": "dairy"
          },
          "title": {
            "type": "string",
            "description": "Product's title",
            "example": "Danbo cheese"
          },
          "groupBloodNotAllowed": {
            "type": "object",
            "properties": {
              "1": {
                "type": "boolean",
                "description": "Whether the product is not allowed for blood type 1"
              },
              "2": {
                "type": "boolean",
                "description": "Whether the product is not allowed for blood type 2"
              },
              "3": {
                "type": "boolean",
                "description": "Whether the product is not allowed for blood type 3"
              },
              "4": {
                "type": "boolean",
                "description": "Whether the product is not allowed for blood type 4"
              }
            }
          }
        }
      },
      "GetProductCategoriesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Product category",
              "example": "dairy"
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": ["dairy", "meat", "vegetables"]
        }
      },
      "GetExercisesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Exercise"
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": [
            {
              "_id": {
                "$oid": "64f2458d6f67bc34bae4f801"
              },
              "bodyPart": "upper arms",
              "equipment": "leverage machine",
              "gifUrl": "https://ftp.goit.study/img/power-pulse/gifs/0019.gif",
              "name": "assisted triceps dip (kneeling)",
              "target": "triceps",
              "burnedCalories": 233,
              "time": 3
            }
          ]
        }
      },
      "Exercise": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64f2458d6f67bc34bae4f801"
          },
          "bodyPart": {
            "type": "string",
            "description": "Body part targeted by the exercise",
            "example": "chest"
          },
          "equipment": {
            "type": "string",
            "description": "Equipment used for the exercise",
            "example": "leverage machine"
          },
          "gifUrl": {
            "type": "string",
            "description": "URL to a GIF demonstrating the exercise",
            "example": "https://ftp.goit.study/img/power-pulse/gifs/0009.gif"
          },
          "name": {
            "type": "string",
            "description": "Name of the exercise",
            "example": "assisted chest dip (kneeling)"
          },
          "target": {
            "type": "string",
            "description": "Muscle group targeted by the exercise",
            "example": "pectorals"
          },
          "burnedCalories": {
            "type": "number",
            "description": "Estimated calories burned during the exercise",
            "example": 329
          },
          "time": {
            "type": "number",
            "description": "Duration of the exercise in minutes",
            "example": 3
          }
        },
        "required": [
          "bodyPart",
          "equipment",
          "gifUrl",
          "name",
          "target",
          "burnedCalories",
          "time"
        ],
        "example": {
          "_id": "64f2458d6f67bc34bae4f7f7",
          "bodyPart": "chest",
          "equipment": "leverage machine",
          "gifUrl": "https://ftp.goit.study/img/power-pulse/gifs/0009.gif",
          "name": "assisted chest dip (kneeling)",
          "target": "pectorals",
          "burnedCalories": 329,
          "time": 3
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "filter": {
            "type": "string",
            "description": "Type of filter",
            "example": "Body parts"
          },
          "name": {
            "type": "string",
            "description": "Name of the filter",
            "example": "back"
          },
          "imgURL": {
            "type": "string",
            "description": "URL to an image representing the filter",
            "example": "https://ftp.goit.study/img/power-pulse/filters/back_wzzphw.jpg"
          }
        },
        "required": ["filter", "name", "imgURL"],
        "example": {
          "_id": "650f35ece3f5522fc6396289",
          "filter": "Body parts",
          "name": "back",
          "imgURL": "https://ftp.goit.study/img/power-pulse/filters/back_wzzphw.jpg"
        }
      },
      "DiaryResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "data": {
            "type": "object",
            "properties": {
              "foods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FoodLog"
                }
              },
              "exercises": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExerciseLog"
                }
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": {
            "foods": [
              {
                "_id": "64f2458d6f67bc34bae4f801",
                "product": "64f2458d6f67bc34bae4f802",
                "date": "10/11/2023",
                "amount": 200,
                "calories": 400,
                "owner": "64f2458d6f67bc34bae4f803",
                "__v": 0
              }
            ],
            "exercises": [
              {
                "_id": "64f2458d6f67bc34bae4f804",
                "exercise": "64f2458d6f67bc34bae4f805",
                "date": "10/11/2023",
                "time": 30,
                "calories": 150,
                "owner": "64f2458d6f67bc34bae4f803",
                "__v": 0
              }
            ]
          }
        }
      },
      "ExerciseByDateReq": {
        "type": "object",
        "required": ["exercise", "time", "calories"],
        "properties": {
          "exercise": {
            "type": "string",
            "description": "Exercise id",
            "example": "64f2458d6f67bc34bae4f805"
          },
          "date": {
            "type": "date",
            "description": "date not required - it tiday by default",
            "example": 20
          },
          "time": {
            "type": "number",
            "description": "time of training",
            "example": 20
          },
          "calories": {
            "type": "number",
            "example": 300
          }
        },
        "example": {
          "exercise": "64f2458d6f67bc34bae4f805",
          "date": "10/11/2023",
          "time": 30,
          "calories": 150
        }
      },
      "ExerciseByDate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Exercice done",
              "example": "dairy"
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": [
            {
              "_id": "64f2458d6f67bc34bae4f804",
              "exercise": "64f2458d6f67bc34bae4f805",
              "date": "10/11/2023",
              "time": 30,
              "calories": 150,
              "owner": "64f2458d6f67bc34bae4f803",
              "__v": 0
            }
          ]
        }
      },
      "FoodByDateReq": {
        "type": "object",
        "required": ["product", "amount", "calories"],
        "properties": {
          "product": {
            "type": "string",
            "description": "product id",
            "example": "64f2458d6f67bc34bae4f802"
          },
          "date": {
            "type": "date",
            "description": "date not required - it tiday by default",
            "example": 20
          },
          "amount": {
            "type": "number",
            "description": "amount g of eaten product",
            "example": 20
          },
          "calories": {
            "type": "number",
            "example": 300
          }
        },
        "example": {
          "product": "64f2458d6f67bc34bae4f802",
          "date": "10/11/2023",
          "amount": 20,
          "calories": 150
        }
      },
      "FoodByDate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Food eaten",
              "example": "dairy"
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": [
            {
              "_id": "64f2458d6f67bc34bae4f801",
              "product": "64f2458d6f67bc34bae4f802",
              "date": "10/11/2023",
              "amount": 200,
              "calories": 400,
              "owner": "64f2458d6f67bc34bae4f803",
              "__v": 0
            }
          ]
        }
      },
      "FoodLog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "calories": {
            "type": "number"
          },
          "owner": {
            "type": "string"
          },
          "__v": {
            "type": "integer"
          }
        },
        "example": {
          "_id": "64f2458d6f67bc34bae4f801",
          "product": "64f2458d6f67bc34bae4f802",
          "date": "10/11/2023",
          "amount": 200,
          "calories": 400,
          "owner": "64f2458d6f67bc34bae4f803",
          "__v": 0
        }
      },
      "ExerciseLog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "exercise": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "time": {
            "type": "number"
          },
          "calories": {
            "type": "number"
          },
          "owner": {
            "type": "string"
          },
          "__v": {
            "type": "integer"
          }
        },
        "example": {
          "_id": "64f2458d6f67bc34bae4f804",
          "exercise": "64f2458d6f67bc34bae4f805",
          "date": "10/11/2023",
          "time": 30,
          "calories": 150,
          "owner": "64f2458d6f67bc34bae4f803",
          "__v": 0
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
